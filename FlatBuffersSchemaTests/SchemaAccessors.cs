// automatically generated by fbagen, do not modify
using FlatBuffers;
using FlatBuffers.Schema;
using System;

namespace FlatBuffers.Schema.Tests
{

    public class MutablePingListItem
    {
        public int Key { get; set; }

        public int Value { get; set; }

    }

    public class PingListItemSerializer : Serializer<MutablePingListItem, PingListItem>
    {
        public static readonly PingListItemSerializer Instance = SerializerSet.Instance.CreateSerializer<PingListItemSerializer, MutablePingListItem, PingListItem>();

        public override Offset<PingListItem> Serialize(FlatBufferBuilder fbb, MutablePingListItem obj)
        {
            PingListItem.StartPingListItem(fbb);
            PingListItem.AddKey(fbb, obj.Key);
            PingListItem.AddValue(fbb, obj.Value);
            return PingListItem.EndPingListItem(fbb);
        }

        protected override PingListItem GetRootAs(ByteBuffer buffer)
        {
            return PingListItem.GetRootAsPingListItem(buffer);
        }

        public override MutablePingListItem Deserialize(PingListItem obj)
        {
            var accessor = new MutablePingListItem();
            accessor.Key = obj.Key;
            accessor.Value = obj.Value;
            return accessor;
        }
    }

    public class MutablePingList
    {
        public int Ticks { get; set; }

        public MutablePingListItem[] Items { get; set; }
    }

    public class PingListSerializer : Serializer<MutablePingList, PingList>
    {
        public static readonly PingListSerializer Instance = SerializerSet.Instance.CreateSerializer<PingListSerializer, MutablePingList, PingList>();

        public override Offset<PingList> Serialize(FlatBufferBuilder fbb, MutablePingList obj)
        {
            PingList.StartPingList(fbb);
            PingList.AddTicks(fbb, obj.Ticks);
            PingList.AddItems(fbb, PingList.CreateItemsVector(fbb, PingListItemSerializer.Instance.Serialize(fbb, obj.Items)));
            return PingList.EndPingList(fbb);
        }

        protected override PingList GetRootAs(ByteBuffer buffer)
        {
            return PingList.GetRootAsPingList(buffer);
        }

        public override MutablePingList Deserialize(PingList obj)
        {
            var accessor = new MutablePingList();
            accessor.Ticks = obj.Ticks;
            accessor.Items = PingListItemSerializer.Instance.Deserialize(obj.ItemsLength, obj.Items);
            return accessor;
        }
    }

    public class MutablePingMessage
    {

        public int Count { get; set; }

        public string Msg { get; set; }

        public MutablePingList[] Lists { get; set; }
    }

    public class PingMessageSerializer : Serializer<MutablePingMessage, PingMessage>
    {
        public static readonly PingMessageSerializer Instance = SerializerSet.Instance.CreateSerializer<PingMessageSerializer, MutablePingMessage, PingMessage>();

        public override Offset<PingMessage> Serialize(FlatBufferBuilder fbb, MutablePingMessage obj)
        {
            PingMessage.StartPingMessage(fbb);
            PingMessage.AddCount(fbb, obj.Count);
            if (!string.IsNullOrEmpty(obj.Msg))
                PingMessage.AddMsg(fbb, fbb.CreateString(obj.Msg));
            PingMessage.AddLists(fbb, PingMessage.CreateListsVector(fbb, PingListSerializer.Instance.Serialize(fbb, obj.Lists)));
            return PingMessage.EndPingMessage(fbb);
        }

        protected override PingMessage GetRootAs(ByteBuffer buffer)
        {
            return PingMessage.GetRootAsPingMessage(buffer);
        }

        public override MutablePingMessage Deserialize(PingMessage obj)
        {
            var accessor = new MutablePingMessage();
            accessor.Count = obj.Count;
            accessor.Msg = obj.Msg;
            accessor.Lists = PingListSerializer.Instance.Deserialize(obj.ListsLength, obj.Lists);
            return accessor;
        }
    }

    public class MutablePongMessage
    {

        public int Count { get; set; }

        public string Msg { get; set; }

    }

    public class PongMessageSerializer : Serializer<MutablePongMessage, PongMessage>
    {
        public static readonly PongMessageSerializer Instance = SerializerSet.Instance.CreateSerializer<PongMessageSerializer, MutablePongMessage, PongMessage>();

        public override Offset<PongMessage> Serialize(FlatBufferBuilder fbb, MutablePongMessage obj)
        {
            PongMessage.StartPongMessage(fbb);
            PongMessage.AddCount(fbb, obj.Count);
            if (!string.IsNullOrEmpty(obj.Msg))
                PongMessage.AddMsg(fbb, fbb.CreateString(obj.Msg));
            return PongMessage.EndPongMessage(fbb);
        }

        protected override PongMessage GetRootAs(ByteBuffer buffer)
        {
            return PongMessage.GetRootAsPongMessage(buffer);
        }

        public override MutablePongMessage Deserialize(PongMessage obj)
        {
            var accessor = new MutablePongMessage();
            accessor.Count = obj.Count;
            accessor.Msg = obj.Msg;
            return accessor;
        }
    }
}